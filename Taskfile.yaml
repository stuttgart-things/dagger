---
version: 3
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi
includes:
  git:
    taskfile: https://raw.githubusercontent.com/stuttgart-things/platform-engineering-showcase/refs/heads/main/taskfiles/git.yaml

dotenv: ['.env', '{{.HOME}}/.env']

tasks:
  create:
    desc: Create new dagger module
    cmds:
      - dagger init --sdk={{ .SDK }} --source=./{{ .MODULE_NAME }} --name={{ .MODULE_NAME }}
      - jq '.source = "."' dagger.json > tmp.json && mv tmp.json dagger.json
      - mv dagger.json ./{{ .MODULE_NAME }}/dagger.json
    vars:
      MODULE_NAME:
        sh: gum input --placeholder "Module name"
      SDK:
        sh: gum choose "go" "python"

  test:
    desc: Select test to run
    cmds:
      - |
        totest=$(gum choose "ansible" "go" "helm" "crossplane" "kcl")
        echo "Selected: ${totest}"
        task test-${totest}

  release:
    desc: push new version
    cmds:
      - task: test-go
      - task: test-helm
      - task: test-ansible
      - task: test-docker
      - task: test-hugo
      - task: test-terraform
      - task: git:pr
      - semantic-release --dry-run
      - semantic-release --debug --no-ci
      - echo released version $(git describe --tags --abbrev=0)

  test-packer:
    desc: Test packer functions
    cmds:
      - |
        dagger call -m packer bake \
        --local-dir "." \
        --build-path tests/packer/hello/hello.pkr.hcl \

  test-kcl:
    desc: Test KCL functions
    cmds:
      - |
        echo "Testing KCL version..."
        dagger call -m {{ .MODULE }} \
        kcl-version \
        --progress plain
      - |
        echo "Testing KCL basic functionality..."
        dagger call -m {{ .MODULE }} \
        test-kcl \
        --progress plain
      - |
        echo "Testing KCL with project files..."
        dagger call -m {{ .MODULE }} \
        run-kcl \
        --source {{ .TEST_KCL_PROJECT }} \
        --entrypoint {{ .TEST_KCL_ENTRYPOINT }} \
        --progress plain
      - |
        echo "Testing KCL validation..."
        dagger call -m {{ .MODULE }} \
        validate-kcl \
        --source {{ .TEST_KCL_PROJECT }} \
        --progress plain
      - |
        echo "Testing CRD conversion with local file..."
        dagger call -m {{ .MODULE }} \
        convert-crd \
        --crd-file {{ .TEST_CRD_FILE }} \
        --progress plain \
        export --path={{ .OUTPUT_MODELS_DIR }}
        echo "Generated CRD models:"
        find {{ .OUTPUT_MODELS_DIR }} -name "*.k" -exec basename {} \;
    vars:
      MODULE: kcl
      TEST_KCL_PROJECT: tests/kcl/test-kcl-project
      TEST_KCL_ENTRYPOINT: main.k
      TEST_CRD_FILE: tests/kcl/test-crd.yaml
      OUTPUT_MODELS_DIR: /tmp/dagger/kcl-test-models

  convert-crd:
    desc: Convert CRD to KCL models using web source or local file
    cmds:
      - |
        echo "Converting CRD to KCL models..."
        if [ -n "{{ .CRD_URL }}" ]; then
          echo "Using web source: {{ .CRD_URL }}"
          dagger call -m {{ .MODULE }} \
          convert-crd \
          --crd-source "{{ .CRD_URL }}" \
          --progress plain \
          export --path={{ .OUTPUT_MODELS_DIR }}
        elif [ -n "{{ .CRD_FILE }}" ]; then
          echo "Using local file: {{ .CRD_FILE }}"
          dagger call -m {{ .MODULE }} \
          convert-crd \
          --crd-file {{ .CRD_FILE }} \
          --progress plain \
          export --path={{ .OUTPUT_MODELS_DIR }}
        else
          echo "Error: Please provide either CRD_URL or CRD_FILE"
          echo "Usage examples:"
          echo "  task convert-crd CRD_URL=https://raw.githubusercontent.com/crossplane-contrib/provider-terraform/main/package/crds/tf.upbound.io_workspaces.yaml"
          echo "  task convert-crd CRD_FILE=./my-crd.yaml"
          exit 1
        fi
        echo "Generated models available in: {{ .OUTPUT_MODELS_DIR }}"
        ls -la {{ .OUTPUT_MODELS_DIR }}
    vars:
      MODULE: kcl
      OUTPUT_MODELS_DIR: /tmp/dagger/kcl-models

  test-ansible:
    desc: Test ansible functions
    cmds:
      - |
        dagger call -m {{ .MODULE }} execute \
        --src . \
        --playbooks tests/ansible/hello.yaml,tests/ansible/hello2.yaml \
        -vv --progress plain

      - |
        rm -rf {{ .OUTPUT_COLLECTION_FOLDER }} || true
        dagger call -m ./{{ .MODULE }} run-collection-build-pipeline \
        --src {{ .TEST_ANSIBLE_CODE }} \
        --progress plain export \
        --path={{ .OUTPUT_COLLECTION_FOLDER }}
        ls -lta {{ .OUTPUT_COLLECTION_FOLDER }}
    vars:
      TEST_ANSIBLE_CODE: tests/ansible/collection # tests/ansible/collection #tests
      MODULE: ansible
      OUTPUT_COLLECTION_FOLDER: /tmp/dagger/ansible

  test-terraform:
    desc: Test terraform functions
    cmds:
      - |
        dagger call -m {{ .MODULE }} \
        version \
        -vv --progress plain
      - |
        dagger call -m {{ .MODULE }} \
        execute \
        --terraform-dir {{ .TEST_TERRAFORM_CODE }} \
        --operation apply \
        -vv --progress plain \
        export --path={{ .OUTPUT_STATE_FOLDER }}
      - |
        dagger call -m {{ .MODULE }} \
        output \
        --terraform-dir {{ .TEST_TERRAFORM_CODE }} \
        -vv --progress plain
      - |
        dagger call -m {{ .MODULE }} \
        execute --operation destroy \
        --terraform-dir {{ .OUTPUT_STATE_FOLDER }} \
        -vv --progress plain
    vars:
      TEST_TERRAFORM_CODE: tests/terraform
      MODULE: terraform
      OUTPUT_STATE_FOLDER: /tmp/dagger/{{ .MODULE }}

  test-kyverno:
    desc: Test Kyverno
    cmds:
      - |
        dagger call -m kyverno validate \
        --policy {{ .TEST_KYVERNO_POLICY }} \
        --resource {{ .TEST_KYVERNO_RESOURCE }} \
        -vv --progress plain
    vars:
      MODULE: kyverno
      TEST_KYVERNO_POLICY: tests/kyverno/policies/
      TEST_KYVERNO_RESOURCE: tests/kyverno/resource-good/

  test-hugo:
    desc: Test hugo
    cmds:
      - |
        # CLEANUP OUTPUT FOLDER
        rm -rf {{ .OUTPUT_HUGO_FOLDER }} || true

        # INIT SITE
        dagger call -m {{ .MODULE }} \
        init-site --name {{ .NAME }} \
        --config {{ .TEST_HUGO_CONFIG }} \
        --content {{ .TEST_HUGO_CONTENT }} \
        export \
        --path {{ .OUTPUT_HUGO_FOLDER }} -vvv
      - |
        # CLEANUP STATIC CONTENT
        rm -rf {{ .OUTPUT_HUGO_STATIC_CONTENT }} || true

        # INIT SITE & EXPORT STAIC CONTENT
        dagger call -m {{ .MODULE }} \
        build-and-export \
        --name {{ .NAME }} \
        --config {{ .TEST_HUGO_CONFIG }} \
        --content {{ .TEST_HUGO_CONTENT }} \
        export \
        --path {{ .OUTPUT_HUGO_STATIC_CONTENT }}  -vvv
    vars:
      NAME: presentation
      MODULE: hugo
      TEST_HUGO_CONFIG: tests/hugo/hugo.toml
      TEST_HUGO_CONTENT: tests/hugo/content
      OUTPUT_HUGO_FOLDER: /tmp/dagger/hugo
      OUTPUT_HUGO_STATIC_CONTENT: /tmp/dagger/hugo/{{ .NAME }}/static

  test-crossplane:
    desc: Test crossplame functions
    cmds:
      - dagger call -m ./{{ .MODULE }} init-package --name test --progress plain export --path={{ .OUTPUT_DIR }}
      - dagger call -m ./{{ .MODULE }} package --src {{ .TEST_PACKAGE }} --progress plain export --path={{ .OUTPUT_DIR_PACKAGE }}
      #- dagger call -m ./{{ .MODULE }} init-custom-package --name {{ .NEW_MODULE_KIND }} --progress plain export --path={{ .OUTPUT_DIR_PACKAGE }}
      - dagger call -m ./{{ .MODULE }} push --src {{ .TEST_PACKAGE }} --progress plain --username stuttgart-things --password=env:GITHUB_TOKEN --registry {{ .PACKAGE_REGISTRY }} --destination {{ .DESTINATION }}/{{ .PACKAGE_NAME }}:{{ .TAG }}
    vars:
      MODULE: crossplane
      TEST_PACKAGE: tests/registry
      OUTPUT_DIR: /tmp/crossplane
      NEW_MODULE_KIND: test
      OUTPUT_DIR_PACKAGE: "/tmp/crossplane/{{ .NEW_MODULE_KIND }}"
      PACKAGE_REGISTRY: ghcr.io
      DESTINATION: "{{ .PACKAGE_REGISTRY }}/stuttgart-things/stuttgart-things"
      PACKAGE_NAME: xplane-registry
      TAG: 2.2.7

  test-go:
    desc: Test go functions
    cmds:
      - dagger call -m ./{{ .MODULE }} lint --src {{ .TEST_GO_CODE }} --timeout 300s --progress plain || true
      - dagger call -m ./{{ .MODULE }} build-binary --src {{ .TEST_GO_CODE }} --goMainFile main.go --binName calc --progress plain export --path={{ .OUTPUT_DIR }} && ls -lta {{ .OUTPUT_DIR }} && rm -rf {{ .OUTPUT_DIR }}
      - dagger call -m ./{{ .MODULE }} ko-build --src {{ .TEST_GO_CODE }} --token=env:GITHUB_TOKEN --repo "{{ .KO_REPO }}" --ko-version {{ .KO_VERSION }} --push true --progress plain
      - dagger call -m ./{{ .MODULE }} security-scan --src {{ .TEST_GO_CODE }} --progress plain
    vars:
      MODULE: go
      TEST_GO_CODE: tests/go/calculator/
      OUTPUT_DIR: /tmp/calc
      KO_REPO: ttl.sh #ghcr.io/stuttgart-things/dagger
      KO_VERSION: 3979dd70544adde24d336d5b605f4cf6f0ea9479 # pragma: allowlist secret
      OUTPUT_GO_DIR: /tmp/go
      #TEST_IMG_TAR: test.tar
      WORKFLOW_REPORT: /tmp/workflow.json

  test-helm:
    desc: Test helm functions
    cmds:
      - |
        dagger call -m {{ .MODULE }} \
        lint \
        --src {{ .TEST_CHART }} \
        -vv --progress plain
      - |
        dagger call -m {{ .MODULE }} \
        render \
        --src {{ .TEST_CHART }} \
        --valuesFile {{ .TEST_VALUES }} \
        -vv --progress plain
      - |
        dagger call -m {{ .MODULE }} \
        package \
        --src {{ .TEST_CHART }} \
        -vv --progress plain \
        export --path={{ .TEST_EXPORT }}
      - |
        dagger call -m {{ .MODULE }} \
        push \
        --src {{ .TEST_CHART }} \
        --registry {{ .PACKAGE_REGISTRY }} \
        --repository {{ .REPOSITORY }} \
        --username {{ .USERNAME }} \
        --password env:GITHUB_TOKEN \
        -vv --progress plain \
      - |
        dagger call -m {{ .MODULE }} \
        push \
        --src {{ .TEST_CHART }} \
        --registry {{ .PACKAGE_REGISTRY }} \
        --repository {{ .REPOSITORY }} \
        --username {{ .USERNAME }} \
        --password env:GITHUB_TOKEN \
        -vv --progress plain \
      - |
        dagger call -m {{ .MODULE }} \
        validate-chart \
        --src {{ .TEST_CHART }} \
        -vv --progress plain \
        export --path={{ .TEST_EXPORT_POLARIS }}
    vars:
      MODULE: helm
      TEST_CHART: tests/{{ .MODULE }}/test-chart/
      TEST_PACKAGE: tests/{{ .MODULE }}/chart.tgz
      TEST_VALUES: tests/{{ .MODULE }}/test-values.yaml
      TEST_EXPORT: /tmp/{{ .MODULE }}
      TEST_EXPORT_POLARIS: "/tmp/polaris.json"
      PACKAGE_REGISTRY: ghcr.io
      REPOSITORY: stuttgart-things
      USERNAME: patrick-hermann-sva

  test-gitlab:
    desc: Test gitlab functions
    cmds:
      - |
        dagger call -m {{ .MODULE }} list-projects \
        --server {{ .gitlab_server }} \
        --group-path {{ .gitlab_group_escaped }} \
        --token env:GITLAB_TOKEN \
        --progress plain
      - |
        dagger call -m {{ .MODULE }} get-project-id \
        --token env:GITLAB_TOKEN \
        --server {{ .gitlab_server }} \
        --project-name "{{ .gitlab_project }}" \
        --group-path "{{ .gitlab_group}}" \
        --progress plain
    vars:
      MODULE: gitlab

  test-docker:
    desc: Test docker module
    cmds:
      - |
        dagger call -m {{ .MODULE }} \
        build-and-push \
        --source {{ .SOURCE }} \
        --repository-name {{ .REPOSITORY_NAME }} \
        --registry-url {{ .REGISTRY_URL }} \
        --tag {{ .VERSION }} \
        --progress plain
    vars:
      MODULE: docker
      SOURCE: tests/docker/
      REPOSITORY_NAME: stuttgart-things/nginx-dagger
      REGISTRY_URL: ttl.sh
      VERSION: 1h

  do:
    desc: Select a task to run
    cmds:
      - |
        # Extract task names (keep internal colons, remove only trailing colon)
        task_name=$(task -l | awk '/^\*/ {print $2}' | sed 's/:$//' | gum choose)

        # Run the selected task
        [ -n "$task_name" ] && task "$task_name"

  default:
    desc: Default task is select & do (work)
    cmds:
      - task do
