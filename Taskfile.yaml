---
version: 3
vars:
  PROJECT_NAME:
    sh: echo ${PWD##*/}
  BRANCH:
    sh: if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then echo $(git rev-parse --abbrev-ref HEAD); else echo main ; fi

tasks:

  release:
    deps:
      - test-crossplane
      - test-go
      - test-helm
    desc: push new version
    cmds:
      - task: pr
      - sbot release version
      - sbot push version
      - echo released version $(git describe --tags --abbrev=0)

  create:
    desc: Create new dagger module
    cmds:
      - dagger init --sdk=go --source=./{{ .MODULE }} --name={{ .MODULE }}
      - jq '.source = "."' dagger.json > tmp.json && mv tmp.json dagger.json
      - mv dagger.json ./{{ .MODULE }}/dagger.json

  test-crossplane:
    desc: Test crossplame modules
    cmds:
      #- dagger call -m ./{{ .MODULE }} init-package --name test --progress plain export --path={{ .OUTPUT_DIR }}
      #- dagger call -m ./{{ .MODULE }} package --src {{ .TEST_PACKAGE }} --progress plain export --path={{ .OUTPUT_DIR_PACKAGE }}
      - dagger call -m ./{{ .MODULE }} init-custom-package --kind {{ .NEW_MODULE_KIND }} --progress plain export --path={{ .OUTPUT_DIR_PACKAGE }}
      #- dagger call -m ./{{ .MODULE }} push --src {{ .TEST_PACKAGE }} --progress plain --username stuttgart-things --password=env:GITHUB_TOKEN --registry {{ .PACKAGE_REGISTRY }} --destination {{ .DESTINATION }}/{{ .PACKAGE_NAME }}:{{ .TAG }}
    vars:
      MODULE: crossplane
      TEST_PACKAGE: tests/registry
      OUTPUT_DIR: /tmp/crossplane
      NEW_MODULE_KIND: test
      OUTPUT_DIR_PACKAGE: "/tmp/crossplane/{{ .NEW_MODULE_KIND }}"
      PACKAGE_REGISTRY: ghcr.io
      DESTINATION: "{{ .PACKAGE_REGISTRY }}/stuttgart-things/stuttgart-things"
      PACKAGE_NAME: xplane-registry
      TAG: 2.2.7

  test-go:
    desc: Test go modules
    cmds:
      - dagger call -m ./{{ .MODULE }} lint --src {{ .TEST_GO_CODE }} --progress plain || true
      - dagger call -m ./{{ .MODULE }} build --src {{ .TEST_GO_CODE }} --progress plain export --path={{ .OUTPUT_DIR }} && ls -lta {{ .OUTPUT_DIR }} && rm -rf {{ .OUTPUT_DIR }}
      # - dagger call -m ./{{ .MODULE }} internal-pipeline --src {{ .TEST_GO_CODE }} --progress plain || true
      - dagger call -m ./{{ .MODULE }} ko-build --src /home/sthings/projects/golang/clusterbook/tests/client --token=env:GITHUB_TOKEN --repo "ghcr.io/stuttgart-things/clusterbook" --progress plain
    vars:
      MODULE: go
      TEST_GO_CODE: tests/calculator/
      OUTPUT_DIR: /tmp/calc

  test-helm:
    desc: Test helm modules
    cmds:
      - dagger call -m {{ .MODULE }} lint --src {{ .TEST_CHART }} --progress plain
      - dagger call -m {{ .MODULE }} render --chart {{ .TEST_CHART }} --values {{ .TEST_VALUES }} --progress plain
      - dagger call -m {{ .MODULE }} package --src {{ .TEST_CHART }} --progress plain export --path={{ .TEST_PACKAGE }} && rm -rf {{ .TEST_PACKAGE }}
      - dagger call -m {{ .MODULE }} run-pipeline --src {{ .TEST_CHART }} --values {{ .TEST_VALUES }} --progress plain
      - dagger call -m {{ .MODULE }} push --src {{ .TEST_CHART }} --progress plain --username {{ .USERNAME }} --password=env:GITHUB_TOKEN --registry {{ .PACKAGE_REGISTRY }} --repository {{ .USERNAME }}
    vars:
      MODULE: helm
      TEST_CHART: tests/test-chart/
      TEST_PACKAGE: tests/chart.tgz
      TEST_VALUES: tests/test-values.yaml
      PACKAGE_REGISTRY: ghcr.io
      USERNAME: stuttgart-things

  branch:
    desc: Create branch from main
    cmds:
      - git checkout main
      - git branch
      - git pull
      - |
        echo "Enter to be created (remote) branch:"
        read BRANCH_NAME;
        git checkout -b ${BRANCH_NAME}
        git push origin ${BRANCH_NAME}
      - git branch
      - git branch --set-upstream-to=origin/main ${BRANCH_NAME}

  commit:
    desc: Commit + push code into branch
    cmds:
      - rm -rf dist/
      - git branch --set-upstream-to=origin/{{ .BRANCH }}
      - git pull
      - |
        git add *
        if [[ -n $(git status --porcelain) ]]; then
          echo "ENTER COMMIT MESSAGE"
          read COMMIT_MESSAGE;
          echo "COMMITTING CHANGES"
          git commit --allow-empty -a -m "$(echo ${COMMIT_MESSAGE})"
        else
          echo "NO CHANGES"
        fi
        git push origin -u {{ .BRANCH }}

  pr:
    desc: Create pull request into main
    cmds:
      - task: commit
      - gh pr create -t "{{ .BRANCH }}" -b "{{ .BRANCH }} branch into main"
      - sleep 10s
      #- gh pr checks $(gh pr list | grep "^[^#;]" | awk '{print $1}') --watch
      - gh pr merge $(gh pr list | grep "^[^#;]" | awk '{print $1}') --auto --rebase --delete-branch
      - git checkout main && git pull